#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

LINEAR_VEL = 0.2
STOP_DISTANCE = 0.25
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR

class Obstacle():
    _cmd_sub = []

    def __init__(self, scan_topic, cmd_vel_topics, pub_topic):
        self._safety_stop = False
        self._scan_sub = rospy.Subscriber(scan_topic, LaserScan, self.scan_callback)
        self._cmd_sub = []
        for i in range(len(cmd_vel_topics)):
            self._cmd_sub.append(rospy.Subscriber(cmd_vel_topics[i], Twist, self.cmd_vel_callback))
        # self._cmd_sub = rospy.Subscriber(cmd_vel_topic, Twist, self.cmd_vel_callback)
        # self._cmd_sub = rospy.Subscriber("/cmd_vel", Twist, self.cmd_vel_callback)
        self._cmd_pub = rospy.Publisher(pub_topic, Twist, queue_size=1)


    def scan_callback(self, data):
        min_distance = min(data.ranges)

        if min_distance < SAFE_STOP_DISTANCE:
            self._safety_stop = True
            rospy.loginfo('Stop!')
        else:
            self._safety_stop = False

    def cmd_vel_callback(self, data):

        if (data.linear.x > 0):
            if (self._safety_stop):
                twist = Twist()
                self._cmd_pub.publish(twist)

    def scan_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 1            # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True

        while not rospy.is_shutdown():
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)

            if min_distance < SAFE_STOP_DISTANCE:
                if turtlebot_moving:
                    twist.linear.x = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = False
                    rospy.loginfo('Stop!')
            else:
                twist.linear.x = LINEAR_VEL
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)

def main():
    rospy.init_node('husky_obstacle')
    scan_topic = rospy.get_param("~scan_topic", "/scan_filtered")
    cmd_vel_topics = ["/cmd_vel"]
    cmd_vel_topics.append("/joy_teleop/cmd_vel")
    cmd_vel_topics.append(rospy.get_param("~cmd_vel_topic", "/joy_teleop_desktop/cmd_vel"))
    pub_topic = rospy.get_param("~pub_topic", "~cmd_vel")
    obstacle = Obstacle(scan_topic, cmd_vel_topics, pub_topic)
    while not rospy.is_shutdown():
        try:
            rospy.spin
        except rospy.ROSInterruptException:
            pass
        except KeyboardInterrupt:
            return

if __name__ == '__main__':
    main()